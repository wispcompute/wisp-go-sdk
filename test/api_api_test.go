/*
Wisp API

Testing ApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/wispcompute/wisp-go-sdk"
)

func Test_openapi_ApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApiAPIService ApiConstrainCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApiAPI.ApiConstrainCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiAPIService ApiDownloadRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApiAPI.ApiDownloadRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiAPIService ApiJobCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApiAPI.ApiJobCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiAPIService ApiJobDestroy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApiAPI.ApiJobDestroy(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiAPIService ApiJobRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApiAPI.ApiJobRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiAPIService ApiProjectCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApiAPI.ApiProjectCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiAPIService ApiProjectJobsRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.ApiAPI.ApiProjectJobsRetrieve(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiAPIService ApiProjectRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApiAPI.ApiProjectRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiAPIService ApiUserPublicKeyCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApiAPI.ApiUserPublicKeyCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiAPIService ApiUserPublicKeyRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApiAPI.ApiUserPublicKeyRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApiAPIService ApiUserRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApiAPI.ApiUserRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
