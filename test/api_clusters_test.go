/*
Wisp API

Testing ClustersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package wisp

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/wispcompute/wisp-go-sdk"
)

func Test_wisp_ClustersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClustersAPIService ClustersCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var action string
		var clusterHash string

		resp, httpRes, err := apiClient.ClustersAPI.ClustersCreate(context.Background(), action, clusterHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService ClustersRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClustersAPI.ClustersRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService ClustersStatusRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterHash string

		resp, httpRes, err := apiClient.ClustersAPI.ClustersStatusRetrieve(context.Background(), clusterHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
