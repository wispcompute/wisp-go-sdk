/*
Wisp API

Testing WispAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/wispcompute/wisp-go-sdk"
)

func Test_openapi_WispAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WispAPIService WispConstrainCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WispAPI.WispConstrainCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WispAPIService WispDownloadRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.WispAPI.WispDownloadRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WispAPIService WispJobCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.WispAPI.WispJobCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WispAPIService WispJobDestroy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.WispAPI.WispJobDestroy(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WispAPIService WispJobRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.WispAPI.WispJobRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WispAPIService WispProjectCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.WispAPI.WispProjectCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WispAPIService WispProjectJobsRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.WispAPI.WispProjectJobsRetrieve(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WispAPIService WispProjectRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.WispAPI.WispProjectRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WispAPIService WispUserPublicKeyCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.WispAPI.WispUserPublicKeyCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WispAPIService WispUserPublicKeyRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.WispAPI.WispUserPublicKeyRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WispAPIService WispUserRetrieve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.WispAPI.WispUserRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
