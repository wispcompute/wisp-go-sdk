/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
	"fmt"
)

// ActionEnum * `start` - start * `stop` - stop * `delete` - delete
type ActionEnum string

// List of ActionEnum
const (
	START ActionEnum = "start"
	STOP ActionEnum = "stop"
	DELETE ActionEnum = "delete"
)

// All allowed values of ActionEnum enum
var AllowedActionEnumEnumValues = []ActionEnum{
	"start",
	"stop",
	"delete",
}

func (v *ActionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActionEnum(value)
	for _, existing := range AllowedActionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActionEnum", value)
}

// NewActionEnumFromValue returns a pointer to a valid ActionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionEnumFromValue(v string) (*ActionEnum, error) {
	ev := ActionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActionEnum: valid values are %v", v, AllowedActionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActionEnum) IsValid() bool {
	for _, existing := range AllowedActionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActionEnum value
func (v ActionEnum) Ptr() *ActionEnum {
	return &v
}

type NullableActionEnum struct {
	value *ActionEnum
	isSet bool
}

func (v NullableActionEnum) Get() *ActionEnum {
	return v.value
}

func (v *NullableActionEnum) Set(val *ActionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableActionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableActionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionEnum(val *ActionEnum) *NullableActionEnum {
	return &NullableActionEnum{value: val, isSet: true}
}

func (v NullableActionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

