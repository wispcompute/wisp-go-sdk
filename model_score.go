/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Score type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Score{}

// Score struct for Score
type Score struct {
	// Relative performance of the offer compared to the current configuration. A float value describing estimated proportional performance of the resource with the given workload. A value of 1 is equal performance, 2 is double performance and 0.5 is half performance.
	RelPerf float64 `json:"rel_perf"`
	// Relative price of the offer compared to the current configuration. A float value describing estimated proportional price of the resource with the given workload. A value of 1 is equal price, 2 is double price and 0.5 is half price.
	RelPrice float64 `json:"rel_price"`
	// Weighted score of the configuration taking into consideration the workload type, cost to performance weighting and more. Higher is better.
	WeightedScore float64 `json:"weighted_score"`
}

type _Score Score

// NewScore instantiates a new Score object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScore(relPerf float64, relPrice float64, weightedScore float64) *Score {
	this := Score{}
	this.RelPerf = relPerf
	this.RelPrice = relPrice
	this.WeightedScore = weightedScore
	return &this
}

// NewScoreWithDefaults instantiates a new Score object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoreWithDefaults() *Score {
	this := Score{}
	return &this
}

// GetRelPerf returns the RelPerf field value
func (o *Score) GetRelPerf() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.RelPerf
}

// GetRelPerfOk returns a tuple with the RelPerf field value
// and a boolean to check if the value has been set.
func (o *Score) GetRelPerfOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelPerf, true
}

// SetRelPerf sets field value
func (o *Score) SetRelPerf(v float64) {
	o.RelPerf = v
}

// GetRelPrice returns the RelPrice field value
func (o *Score) GetRelPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.RelPrice
}

// GetRelPriceOk returns a tuple with the RelPrice field value
// and a boolean to check if the value has been set.
func (o *Score) GetRelPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelPrice, true
}

// SetRelPrice sets field value
func (o *Score) SetRelPrice(v float64) {
	o.RelPrice = v
}

// GetWeightedScore returns the WeightedScore field value
func (o *Score) GetWeightedScore() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.WeightedScore
}

// GetWeightedScoreOk returns a tuple with the WeightedScore field value
// and a boolean to check if the value has been set.
func (o *Score) GetWeightedScoreOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeightedScore, true
}

// SetWeightedScore sets field value
func (o *Score) SetWeightedScore(v float64) {
	o.WeightedScore = v
}

func (o Score) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Score) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rel_perf"] = o.RelPerf
	toSerialize["rel_price"] = o.RelPrice
	toSerialize["weighted_score"] = o.WeightedScore
	return toSerialize, nil
}

func (o *Score) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rel_perf",
		"rel_price",
		"weighted_score",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScore := _Score{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScore)

	if err != nil {
		return err
	}

	*o = Score(varScore)

	return err
}

type NullableScore struct {
	value *Score
	isSet bool
}

func (v NullableScore) Get() *Score {
	return v.value
}

func (v *NullableScore) Set(val *Score) {
	v.value = val
	v.isSet = true
}

func (v NullableScore) IsSet() bool {
	return v.isSet
}

func (v *NullableScore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScore(val *Score) *NullableScore {
	return &NullableScore{value: val, isSet: true}
}

func (v NullableScore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


