/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnalyzeGetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyzeGetRequest{}

// AnalyzeGetRequest struct for AnalyzeGetRequest
type AnalyzeGetRequest struct {
	Workload Workload `json:"workload"`
	CurrentResources ClusterOffer `json:"current_resources"`
	Constraints Resources `json:"constraints"`
}

type _AnalyzeGetRequest AnalyzeGetRequest

// NewAnalyzeGetRequest instantiates a new AnalyzeGetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyzeGetRequest(workload Workload, currentResources ClusterOffer, constraints Resources) *AnalyzeGetRequest {
	this := AnalyzeGetRequest{}
	this.Workload = workload
	this.CurrentResources = currentResources
	this.Constraints = constraints
	return &this
}

// NewAnalyzeGetRequestWithDefaults instantiates a new AnalyzeGetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyzeGetRequestWithDefaults() *AnalyzeGetRequest {
	this := AnalyzeGetRequest{}
	return &this
}

// GetWorkload returns the Workload field value
func (o *AnalyzeGetRequest) GetWorkload() Workload {
	if o == nil {
		var ret Workload
		return ret
	}

	return o.Workload
}

// GetWorkloadOk returns a tuple with the Workload field value
// and a boolean to check if the value has been set.
func (o *AnalyzeGetRequest) GetWorkloadOk() (*Workload, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workload, true
}

// SetWorkload sets field value
func (o *AnalyzeGetRequest) SetWorkload(v Workload) {
	o.Workload = v
}

// GetCurrentResources returns the CurrentResources field value
func (o *AnalyzeGetRequest) GetCurrentResources() ClusterOffer {
	if o == nil {
		var ret ClusterOffer
		return ret
	}

	return o.CurrentResources
}

// GetCurrentResourcesOk returns a tuple with the CurrentResources field value
// and a boolean to check if the value has been set.
func (o *AnalyzeGetRequest) GetCurrentResourcesOk() (*ClusterOffer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentResources, true
}

// SetCurrentResources sets field value
func (o *AnalyzeGetRequest) SetCurrentResources(v ClusterOffer) {
	o.CurrentResources = v
}

// GetConstraints returns the Constraints field value
func (o *AnalyzeGetRequest) GetConstraints() Resources {
	if o == nil {
		var ret Resources
		return ret
	}

	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value
// and a boolean to check if the value has been set.
func (o *AnalyzeGetRequest) GetConstraintsOk() (*Resources, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Constraints, true
}

// SetConstraints sets field value
func (o *AnalyzeGetRequest) SetConstraints(v Resources) {
	o.Constraints = v
}

func (o AnalyzeGetRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyzeGetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workload"] = o.Workload
	toSerialize["current_resources"] = o.CurrentResources
	toSerialize["constraints"] = o.Constraints
	return toSerialize, nil
}

func (o *AnalyzeGetRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workload",
		"current_resources",
		"constraints",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalyzeGetRequest := _AnalyzeGetRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalyzeGetRequest)

	if err != nil {
		return err
	}

	*o = AnalyzeGetRequest(varAnalyzeGetRequest)

	return err
}

type NullableAnalyzeGetRequest struct {
	value *AnalyzeGetRequest
	isSet bool
}

func (v NullableAnalyzeGetRequest) Get() *AnalyzeGetRequest {
	return v.value
}

func (v *NullableAnalyzeGetRequest) Set(val *AnalyzeGetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyzeGetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyzeGetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyzeGetRequest(val *AnalyzeGetRequest) *NullableAnalyzeGetRequest {
	return &NullableAnalyzeGetRequest{value: val, isSet: true}
}

func (v NullableAnalyzeGetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyzeGetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


