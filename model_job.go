/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
	"time"
)

// Job Job serializer.
type Job struct {
	Name string `json:"name"`
	JobId string `json:"job_id"`
	Configuration string `json:"configuration"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	StartedAt NullableTime `json:"started_at,omitempty"`
	FinishedAt NullableTime `json:"finished_at,omitempty"`
	Logs string `json:"logs"`
	Cluster Cluster `json:"cluster"`
}

// NewJob instantiates a new Job object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJob(name string, jobId string, configuration string, createdAt time.Time, updatedAt time.Time, logs string, cluster Cluster) *Job {
	this := Job{}
	this.Name = name
	this.JobId = jobId
	this.Configuration = configuration
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Logs = logs
	this.Cluster = cluster
	return &this
}

// NewJobWithDefaults instantiates a new Job object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobWithDefaults() *Job {
	this := Job{}
	return &this
}

// GetName returns the Name field value
func (o *Job) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Job) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Job) SetName(v string) {
	o.Name = v
}

// GetJobId returns the JobId field value
func (o *Job) GetJobId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value
// and a boolean to check if the value has been set.
func (o *Job) GetJobIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JobId, true
}

// SetJobId sets field value
func (o *Job) SetJobId(v string) {
	o.JobId = v
}

// GetConfiguration returns the Configuration field value
func (o *Job) GetConfiguration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *Job) GetConfigurationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Configuration, true
}

// SetConfiguration sets field value
func (o *Job) SetConfiguration(v string) {
	o.Configuration = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Job) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Job) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Job) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Job) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Job) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Job) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetStartedAt() time.Time {
	if o == nil || o.StartedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartedAt.Get()
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetStartedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartedAt.Get(), o.StartedAt.IsSet()
}

// HasStartedAt returns a boolean if a field has been set.
func (o *Job) HasStartedAt() bool {
	if o != nil && o.StartedAt.IsSet() {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given NullableTime and assigns it to the StartedAt field.
func (o *Job) SetStartedAt(v time.Time) {
	o.StartedAt.Set(&v)
}
// SetStartedAtNil sets the value for StartedAt to be an explicit nil
func (o *Job) SetStartedAtNil() {
	o.StartedAt.Set(nil)
}

// UnsetStartedAt ensures that no value is present for StartedAt, not even an explicit nil
func (o *Job) UnsetStartedAt() {
	o.StartedAt.Unset()
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetFinishedAt() time.Time {
	if o == nil || o.FinishedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.FinishedAt.Get()
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetFinishedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FinishedAt.Get(), o.FinishedAt.IsSet()
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *Job) HasFinishedAt() bool {
	if o != nil && o.FinishedAt.IsSet() {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given NullableTime and assigns it to the FinishedAt field.
func (o *Job) SetFinishedAt(v time.Time) {
	o.FinishedAt.Set(&v)
}
// SetFinishedAtNil sets the value for FinishedAt to be an explicit nil
func (o *Job) SetFinishedAtNil() {
	o.FinishedAt.Set(nil)
}

// UnsetFinishedAt ensures that no value is present for FinishedAt, not even an explicit nil
func (o *Job) UnsetFinishedAt() {
	o.FinishedAt.Unset()
}

// GetLogs returns the Logs field value
func (o *Job) GetLogs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *Job) GetLogsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Logs, true
}

// SetLogs sets field value
func (o *Job) SetLogs(v string) {
	o.Logs = v
}

// GetCluster returns the Cluster field value
// If the value is explicit nil, the zero value for Cluster will be returned
func (o *Job) GetCluster() Cluster {
	if o == nil {
		var ret Cluster
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetClusterOk() (*Cluster, bool) {
	if o == nil || o.Cluster == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *Job) SetCluster(v Cluster) {
	o.Cluster = v
}

func (o Job) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["job_id"] = o.JobId
	}
	if true {
		toSerialize["configuration"] = o.Configuration
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.StartedAt.IsSet() {
		toSerialize["started_at"] = o.StartedAt.Get()
	}
	if o.FinishedAt.IsSet() {
		toSerialize["finished_at"] = o.FinishedAt.Get()
	}
	if true {
		toSerialize["logs"] = o.Logs
	}
	if o.Cluster != nil {
		toSerialize["cluster"] = o.Cluster
	}
	return json.Marshal(toSerialize)
}

type NullableJob struct {
	value *Job
	isSet bool
}

func (v NullableJob) Get() *Job {
	return v.value
}

func (v *NullableJob) Set(val *Job) {
	v.value = val
	v.isSet = true
}

func (v NullableJob) IsSet() bool {
	return v.isSet
}

func (v *NullableJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJob(val *Job) *NullableJob {
	return &NullableJob{value: val, isSet: true}
}

func (v NullableJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


