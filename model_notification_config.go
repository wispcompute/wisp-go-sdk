/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NotificationConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationConfig{}

// NotificationConfig struct for NotificationConfig
type NotificationConfig struct {
	Id int32 `json:"id"`
	EmailOnSuccess *bool `json:"email_on_success,omitempty"`
	EmailOnFailure *bool `json:"email_on_failure,omitempty"`
	EmailRecipient *string `json:"email_recipient,omitempty"`
}

type _NotificationConfig NotificationConfig

// NewNotificationConfig instantiates a new NotificationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationConfig(id int32) *NotificationConfig {
	this := NotificationConfig{}
	this.Id = id
	return &this
}

// NewNotificationConfigWithDefaults instantiates a new NotificationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationConfigWithDefaults() *NotificationConfig {
	this := NotificationConfig{}
	return &this
}

// GetId returns the Id field value
func (o *NotificationConfig) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NotificationConfig) SetId(v int32) {
	o.Id = v
}

// GetEmailOnSuccess returns the EmailOnSuccess field value if set, zero value otherwise.
func (o *NotificationConfig) GetEmailOnSuccess() bool {
	if o == nil || IsNil(o.EmailOnSuccess) {
		var ret bool
		return ret
	}
	return *o.EmailOnSuccess
}

// GetEmailOnSuccessOk returns a tuple with the EmailOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetEmailOnSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailOnSuccess) {
		return nil, false
	}
	return o.EmailOnSuccess, true
}

// HasEmailOnSuccess returns a boolean if a field has been set.
func (o *NotificationConfig) HasEmailOnSuccess() bool {
	if o != nil && !IsNil(o.EmailOnSuccess) {
		return true
	}

	return false
}

// SetEmailOnSuccess gets a reference to the given bool and assigns it to the EmailOnSuccess field.
func (o *NotificationConfig) SetEmailOnSuccess(v bool) {
	o.EmailOnSuccess = &v
}

// GetEmailOnFailure returns the EmailOnFailure field value if set, zero value otherwise.
func (o *NotificationConfig) GetEmailOnFailure() bool {
	if o == nil || IsNil(o.EmailOnFailure) {
		var ret bool
		return ret
	}
	return *o.EmailOnFailure
}

// GetEmailOnFailureOk returns a tuple with the EmailOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetEmailOnFailureOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailOnFailure) {
		return nil, false
	}
	return o.EmailOnFailure, true
}

// HasEmailOnFailure returns a boolean if a field has been set.
func (o *NotificationConfig) HasEmailOnFailure() bool {
	if o != nil && !IsNil(o.EmailOnFailure) {
		return true
	}

	return false
}

// SetEmailOnFailure gets a reference to the given bool and assigns it to the EmailOnFailure field.
func (o *NotificationConfig) SetEmailOnFailure(v bool) {
	o.EmailOnFailure = &v
}

// GetEmailRecipient returns the EmailRecipient field value if set, zero value otherwise.
func (o *NotificationConfig) GetEmailRecipient() string {
	if o == nil || IsNil(o.EmailRecipient) {
		var ret string
		return ret
	}
	return *o.EmailRecipient
}

// GetEmailRecipientOk returns a tuple with the EmailRecipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetEmailRecipientOk() (*string, bool) {
	if o == nil || IsNil(o.EmailRecipient) {
		return nil, false
	}
	return o.EmailRecipient, true
}

// HasEmailRecipient returns a boolean if a field has been set.
func (o *NotificationConfig) HasEmailRecipient() bool {
	if o != nil && !IsNil(o.EmailRecipient) {
		return true
	}

	return false
}

// SetEmailRecipient gets a reference to the given string and assigns it to the EmailRecipient field.
func (o *NotificationConfig) SetEmailRecipient(v string) {
	o.EmailRecipient = &v
}

func (o NotificationConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.EmailOnSuccess) {
		toSerialize["email_on_success"] = o.EmailOnSuccess
	}
	if !IsNil(o.EmailOnFailure) {
		toSerialize["email_on_failure"] = o.EmailOnFailure
	}
	if !IsNil(o.EmailRecipient) {
		toSerialize["email_recipient"] = o.EmailRecipient
	}
	return toSerialize, nil
}

func (o *NotificationConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationConfig := _NotificationConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationConfig)

	if err != nil {
		return err
	}

	*o = NotificationConfig(varNotificationConfig)

	return err
}

type NullableNotificationConfig struct {
	value *NotificationConfig
	isSet bool
}

func (v NullableNotificationConfig) Get() *NotificationConfig {
	return v.value
}

func (v *NullableNotificationConfig) Set(val *NotificationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationConfig(val *NotificationConfig) *NullableNotificationConfig {
	return &NullableNotificationConfig{value: val, isSet: true}
}

func (v NullableNotificationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


