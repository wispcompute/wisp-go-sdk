/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnalyzerResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyzerResult{}

// AnalyzerResult struct for AnalyzerResult
type AnalyzerResult struct {
	Offer ClusterOffer `json:"offer"`
	Score Score `json:"score"`
}

type _AnalyzerResult AnalyzerResult

// NewAnalyzerResult instantiates a new AnalyzerResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyzerResult(offer ClusterOffer, score Score) *AnalyzerResult {
	this := AnalyzerResult{}
	this.Offer = offer
	this.Score = score
	return &this
}

// NewAnalyzerResultWithDefaults instantiates a new AnalyzerResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyzerResultWithDefaults() *AnalyzerResult {
	this := AnalyzerResult{}
	return &this
}

// GetOffer returns the Offer field value
func (o *AnalyzerResult) GetOffer() ClusterOffer {
	if o == nil {
		var ret ClusterOffer
		return ret
	}

	return o.Offer
}

// GetOfferOk returns a tuple with the Offer field value
// and a boolean to check if the value has been set.
func (o *AnalyzerResult) GetOfferOk() (*ClusterOffer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offer, true
}

// SetOffer sets field value
func (o *AnalyzerResult) SetOffer(v ClusterOffer) {
	o.Offer = v
}

// GetScore returns the Score field value
func (o *AnalyzerResult) GetScore() Score {
	if o == nil {
		var ret Score
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *AnalyzerResult) GetScoreOk() (*Score, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *AnalyzerResult) SetScore(v Score) {
	o.Score = v
}

func (o AnalyzerResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyzerResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offer"] = o.Offer
	toSerialize["score"] = o.Score
	return toSerialize, nil
}

func (o *AnalyzerResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offer",
		"score",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalyzerResult := _AnalyzerResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalyzerResult)

	if err != nil {
		return err
	}

	*o = AnalyzerResult(varAnalyzerResult)

	return err
}

type NullableAnalyzerResult struct {
	value *AnalyzerResult
	isSet bool
}

func (v NullableAnalyzerResult) Get() *AnalyzerResult {
	return v.value
}

func (v *NullableAnalyzerResult) Set(val *AnalyzerResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyzerResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyzerResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyzerResult(val *AnalyzerResult) *NullableAnalyzerResult {
	return &NullableAnalyzerResult{value: val, isSet: true}
}

func (v NullableAnalyzerResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyzerResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


