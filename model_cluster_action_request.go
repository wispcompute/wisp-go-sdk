/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterActionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterActionRequest{}

// ClusterActionRequest Cluster action request serializer.
type ClusterActionRequest struct {
	ClusterName string `json:"cluster_name"`
	Action ActionEnum `json:"action"`
	Wait *bool `json:"wait,omitempty"`
}

type _ClusterActionRequest ClusterActionRequest

// NewClusterActionRequest instantiates a new ClusterActionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterActionRequest(clusterName string, action ActionEnum) *ClusterActionRequest {
	this := ClusterActionRequest{}
	this.ClusterName = clusterName
	this.Action = action
	var wait bool = false
	this.Wait = &wait
	return &this
}

// NewClusterActionRequestWithDefaults instantiates a new ClusterActionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterActionRequestWithDefaults() *ClusterActionRequest {
	this := ClusterActionRequest{}
	var wait bool = false
	this.Wait = &wait
	return &this
}

// GetClusterName returns the ClusterName field value
func (o *ClusterActionRequest) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *ClusterActionRequest) GetClusterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *ClusterActionRequest) SetClusterName(v string) {
	o.ClusterName = v
}

// GetAction returns the Action field value
func (o *ClusterActionRequest) GetAction() ActionEnum {
	if o == nil {
		var ret ActionEnum
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ClusterActionRequest) GetActionOk() (*ActionEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ClusterActionRequest) SetAction(v ActionEnum) {
	o.Action = v
}

// GetWait returns the Wait field value if set, zero value otherwise.
func (o *ClusterActionRequest) GetWait() bool {
	if o == nil || IsNil(o.Wait) {
		var ret bool
		return ret
	}
	return *o.Wait
}

// GetWaitOk returns a tuple with the Wait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterActionRequest) GetWaitOk() (*bool, bool) {
	if o == nil || IsNil(o.Wait) {
		return nil, false
	}
	return o.Wait, true
}

// HasWait returns a boolean if a field has been set.
func (o *ClusterActionRequest) HasWait() bool {
	if o != nil && !IsNil(o.Wait) {
		return true
	}

	return false
}

// SetWait gets a reference to the given bool and assigns it to the Wait field.
func (o *ClusterActionRequest) SetWait(v bool) {
	o.Wait = &v
}

func (o ClusterActionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterActionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster_name"] = o.ClusterName
	toSerialize["action"] = o.Action
	if !IsNil(o.Wait) {
		toSerialize["wait"] = o.Wait
	}
	return toSerialize, nil
}

func (o *ClusterActionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster_name",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterActionRequest := _ClusterActionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterActionRequest)

	if err != nil {
		return err
	}

	*o = ClusterActionRequest(varClusterActionRequest)

	return err
}

type NullableClusterActionRequest struct {
	value *ClusterActionRequest
	isSet bool
}

func (v NullableClusterActionRequest) Get() *ClusterActionRequest {
	return v.value
}

func (v *NullableClusterActionRequest) Set(val *ClusterActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterActionRequest(val *ClusterActionRequest) *NullableClusterActionRequest {
	return &NullableClusterActionRequest{value: val, isSet: true}
}

func (v NullableClusterActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


