/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JobPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobPostRequest{}

// JobPostRequest Job post request serializer.
type JobPostRequest struct {
	Choice ClusterOffer `json:"choice"`
	Config ConstrainRequest `json:"config"`
	Project Project `json:"project"`
}

type _JobPostRequest JobPostRequest

// NewJobPostRequest instantiates a new JobPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobPostRequest(choice ClusterOffer, config ConstrainRequest, project Project) *JobPostRequest {
	this := JobPostRequest{}
	this.Choice = choice
	this.Config = config
	this.Project = project
	return &this
}

// NewJobPostRequestWithDefaults instantiates a new JobPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobPostRequestWithDefaults() *JobPostRequest {
	this := JobPostRequest{}
	return &this
}

// GetChoice returns the Choice field value
func (o *JobPostRequest) GetChoice() ClusterOffer {
	if o == nil {
		var ret ClusterOffer
		return ret
	}

	return o.Choice
}

// GetChoiceOk returns a tuple with the Choice field value
// and a boolean to check if the value has been set.
func (o *JobPostRequest) GetChoiceOk() (*ClusterOffer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Choice, true
}

// SetChoice sets field value
func (o *JobPostRequest) SetChoice(v ClusterOffer) {
	o.Choice = v
}

// GetConfig returns the Config field value
func (o *JobPostRequest) GetConfig() ConstrainRequest {
	if o == nil {
		var ret ConstrainRequest
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *JobPostRequest) GetConfigOk() (*ConstrainRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *JobPostRequest) SetConfig(v ConstrainRequest) {
	o.Config = v
}

// GetProject returns the Project field value
func (o *JobPostRequest) GetProject() Project {
	if o == nil {
		var ret Project
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *JobPostRequest) GetProjectOk() (*Project, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *JobPostRequest) SetProject(v Project) {
	o.Project = v
}

func (o JobPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["choice"] = o.Choice
	toSerialize["config"] = o.Config
	toSerialize["project"] = o.Project
	return toSerialize, nil
}

func (o *JobPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"choice",
		"config",
		"project",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobPostRequest := _JobPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobPostRequest)

	if err != nil {
		return err
	}

	*o = JobPostRequest(varJobPostRequest)

	return err
}

type NullableJobPostRequest struct {
	value *JobPostRequest
	isSet bool
}

func (v NullableJobPostRequest) Get() *JobPostRequest {
	return v.value
}

func (v *NullableJobPostRequest) Set(val *JobPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJobPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJobPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobPostRequest(val *JobPostRequest) *NullableJobPostRequest {
	return &NullableJobPostRequest{value: val, isSet: true}
}

func (v NullableJobPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


