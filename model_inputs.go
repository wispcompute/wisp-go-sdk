/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
)

// checks if the Inputs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Inputs{}

// Inputs Inputs configuration serializer.
type Inputs struct {
	Buckets []Bucket `json:"buckets,omitempty"`
}

// NewInputs instantiates a new Inputs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputs() *Inputs {
	this := Inputs{}
	return &this
}

// NewInputsWithDefaults instantiates a new Inputs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputsWithDefaults() *Inputs {
	this := Inputs{}
	return &this
}

// GetBuckets returns the Buckets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Inputs) GetBuckets() []Bucket {
	if o == nil {
		var ret []Bucket
		return ret
	}
	return o.Buckets
}

// GetBucketsOk returns a tuple with the Buckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Inputs) GetBucketsOk() ([]Bucket, bool) {
	if o == nil || IsNil(o.Buckets) {
		return nil, false
	}
	return o.Buckets, true
}

// HasBuckets returns a boolean if a field has been set.
func (o *Inputs) HasBuckets() bool {
	if o != nil && !IsNil(o.Buckets) {
		return true
	}

	return false
}

// SetBuckets gets a reference to the given []Bucket and assigns it to the Buckets field.
func (o *Inputs) SetBuckets(v []Bucket) {
	o.Buckets = v
}

func (o Inputs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Inputs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Buckets != nil {
		toSerialize["buckets"] = o.Buckets
	}
	return toSerialize, nil
}

type NullableInputs struct {
	value *Inputs
	isSet bool
}

func (v NullableInputs) Get() *Inputs {
	return v.value
}

func (v *NullableInputs) Set(val *Inputs) {
	v.value = val
	v.isSet = true
}

func (v NullableInputs) IsSet() bool {
	return v.isSet
}

func (v *NullableInputs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputs(val *Inputs) *NullableInputs {
	return &NullableInputs{value: val, isSet: true}
}

func (v NullableInputs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


