/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
)

// checks if the PickledHandleField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PickledHandleField{}

// PickledHandleField Custom field serializer for pickled handle data.
type PickledHandleField struct {
	DockerUser NullableString `json:"docker_user,omitempty"`
	StableInternalIp NullableString `json:"stable_internal_ip,omitempty"`
	StableExternalIp NullableString `json:"stable_external_ip,omitempty"`
	StableSshPorts []int32 `json:"stable_ssh_ports,omitempty"`
	SshUser NullableString `json:"ssh_user,omitempty"`
}

// NewPickledHandleField instantiates a new PickledHandleField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPickledHandleField() *PickledHandleField {
	this := PickledHandleField{}
	return &this
}

// NewPickledHandleFieldWithDefaults instantiates a new PickledHandleField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPickledHandleFieldWithDefaults() *PickledHandleField {
	this := PickledHandleField{}
	return &this
}

// GetDockerUser returns the DockerUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PickledHandleField) GetDockerUser() string {
	if o == nil || IsNil(o.DockerUser.Get()) {
		var ret string
		return ret
	}
	return *o.DockerUser.Get()
}

// GetDockerUserOk returns a tuple with the DockerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PickledHandleField) GetDockerUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DockerUser.Get(), o.DockerUser.IsSet()
}

// HasDockerUser returns a boolean if a field has been set.
func (o *PickledHandleField) HasDockerUser() bool {
	if o != nil && o.DockerUser.IsSet() {
		return true
	}

	return false
}

// SetDockerUser gets a reference to the given NullableString and assigns it to the DockerUser field.
func (o *PickledHandleField) SetDockerUser(v string) {
	o.DockerUser.Set(&v)
}
// SetDockerUserNil sets the value for DockerUser to be an explicit nil
func (o *PickledHandleField) SetDockerUserNil() {
	o.DockerUser.Set(nil)
}

// UnsetDockerUser ensures that no value is present for DockerUser, not even an explicit nil
func (o *PickledHandleField) UnsetDockerUser() {
	o.DockerUser.Unset()
}

// GetStableInternalIp returns the StableInternalIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PickledHandleField) GetStableInternalIp() string {
	if o == nil || IsNil(o.StableInternalIp.Get()) {
		var ret string
		return ret
	}
	return *o.StableInternalIp.Get()
}

// GetStableInternalIpOk returns a tuple with the StableInternalIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PickledHandleField) GetStableInternalIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StableInternalIp.Get(), o.StableInternalIp.IsSet()
}

// HasStableInternalIp returns a boolean if a field has been set.
func (o *PickledHandleField) HasStableInternalIp() bool {
	if o != nil && o.StableInternalIp.IsSet() {
		return true
	}

	return false
}

// SetStableInternalIp gets a reference to the given NullableString and assigns it to the StableInternalIp field.
func (o *PickledHandleField) SetStableInternalIp(v string) {
	o.StableInternalIp.Set(&v)
}
// SetStableInternalIpNil sets the value for StableInternalIp to be an explicit nil
func (o *PickledHandleField) SetStableInternalIpNil() {
	o.StableInternalIp.Set(nil)
}

// UnsetStableInternalIp ensures that no value is present for StableInternalIp, not even an explicit nil
func (o *PickledHandleField) UnsetStableInternalIp() {
	o.StableInternalIp.Unset()
}

// GetStableExternalIp returns the StableExternalIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PickledHandleField) GetStableExternalIp() string {
	if o == nil || IsNil(o.StableExternalIp.Get()) {
		var ret string
		return ret
	}
	return *o.StableExternalIp.Get()
}

// GetStableExternalIpOk returns a tuple with the StableExternalIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PickledHandleField) GetStableExternalIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StableExternalIp.Get(), o.StableExternalIp.IsSet()
}

// HasStableExternalIp returns a boolean if a field has been set.
func (o *PickledHandleField) HasStableExternalIp() bool {
	if o != nil && o.StableExternalIp.IsSet() {
		return true
	}

	return false
}

// SetStableExternalIp gets a reference to the given NullableString and assigns it to the StableExternalIp field.
func (o *PickledHandleField) SetStableExternalIp(v string) {
	o.StableExternalIp.Set(&v)
}
// SetStableExternalIpNil sets the value for StableExternalIp to be an explicit nil
func (o *PickledHandleField) SetStableExternalIpNil() {
	o.StableExternalIp.Set(nil)
}

// UnsetStableExternalIp ensures that no value is present for StableExternalIp, not even an explicit nil
func (o *PickledHandleField) UnsetStableExternalIp() {
	o.StableExternalIp.Unset()
}

// GetStableSshPorts returns the StableSshPorts field value if set, zero value otherwise.
func (o *PickledHandleField) GetStableSshPorts() []int32 {
	if o == nil || IsNil(o.StableSshPorts) {
		var ret []int32
		return ret
	}
	return o.StableSshPorts
}

// GetStableSshPortsOk returns a tuple with the StableSshPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PickledHandleField) GetStableSshPortsOk() ([]int32, bool) {
	if o == nil || IsNil(o.StableSshPorts) {
		return nil, false
	}
	return o.StableSshPorts, true
}

// HasStableSshPorts returns a boolean if a field has been set.
func (o *PickledHandleField) HasStableSshPorts() bool {
	if o != nil && !IsNil(o.StableSshPorts) {
		return true
	}

	return false
}

// SetStableSshPorts gets a reference to the given []int32 and assigns it to the StableSshPorts field.
func (o *PickledHandleField) SetStableSshPorts(v []int32) {
	o.StableSshPorts = v
}

// GetSshUser returns the SshUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PickledHandleField) GetSshUser() string {
	if o == nil || IsNil(o.SshUser.Get()) {
		var ret string
		return ret
	}
	return *o.SshUser.Get()
}

// GetSshUserOk returns a tuple with the SshUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PickledHandleField) GetSshUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SshUser.Get(), o.SshUser.IsSet()
}

// HasSshUser returns a boolean if a field has been set.
func (o *PickledHandleField) HasSshUser() bool {
	if o != nil && o.SshUser.IsSet() {
		return true
	}

	return false
}

// SetSshUser gets a reference to the given NullableString and assigns it to the SshUser field.
func (o *PickledHandleField) SetSshUser(v string) {
	o.SshUser.Set(&v)
}
// SetSshUserNil sets the value for SshUser to be an explicit nil
func (o *PickledHandleField) SetSshUserNil() {
	o.SshUser.Set(nil)
}

// UnsetSshUser ensures that no value is present for SshUser, not even an explicit nil
func (o *PickledHandleField) UnsetSshUser() {
	o.SshUser.Unset()
}

func (o PickledHandleField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PickledHandleField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DockerUser.IsSet() {
		toSerialize["docker_user"] = o.DockerUser.Get()
	}
	if o.StableInternalIp.IsSet() {
		toSerialize["stable_internal_ip"] = o.StableInternalIp.Get()
	}
	if o.StableExternalIp.IsSet() {
		toSerialize["stable_external_ip"] = o.StableExternalIp.Get()
	}
	if !IsNil(o.StableSshPorts) {
		toSerialize["stable_ssh_ports"] = o.StableSshPorts
	}
	if o.SshUser.IsSet() {
		toSerialize["ssh_user"] = o.SshUser.Get()
	}
	return toSerialize, nil
}

type NullablePickledHandleField struct {
	value *PickledHandleField
	isSet bool
}

func (v NullablePickledHandleField) Get() *PickledHandleField {
	return v.value
}

func (v *NullablePickledHandleField) Set(val *PickledHandleField) {
	v.value = val
	v.isSet = true
}

func (v NullablePickledHandleField) IsSet() bool {
	return v.isSet
}

func (v *NullablePickledHandleField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePickledHandleField(val *PickledHandleField) *NullablePickledHandleField {
	return &NullablePickledHandleField{value: val, isSet: true}
}

func (v NullablePickledHandleField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePickledHandleField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


