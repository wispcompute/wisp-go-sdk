/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterStatusResponse{}

// ClusterStatusResponse Cluster status response serializer.
type ClusterStatusResponse struct {
	ClusterName string `json:"cluster_name"`
	Status string `json:"status"`
}

type _ClusterStatusResponse ClusterStatusResponse

// NewClusterStatusResponse instantiates a new ClusterStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterStatusResponse(clusterName string, status string) *ClusterStatusResponse {
	this := ClusterStatusResponse{}
	this.ClusterName = clusterName
	this.Status = status
	return &this
}

// NewClusterStatusResponseWithDefaults instantiates a new ClusterStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterStatusResponseWithDefaults() *ClusterStatusResponse {
	this := ClusterStatusResponse{}
	return &this
}

// GetClusterName returns the ClusterName field value
func (o *ClusterStatusResponse) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *ClusterStatusResponse) GetClusterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *ClusterStatusResponse) SetClusterName(v string) {
	o.ClusterName = v
}

// GetStatus returns the Status field value
func (o *ClusterStatusResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ClusterStatusResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ClusterStatusResponse) SetStatus(v string) {
	o.Status = v
}

func (o ClusterStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster_name"] = o.ClusterName
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *ClusterStatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster_name",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterStatusResponse := _ClusterStatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterStatusResponse)

	if err != nil {
		return err
	}

	*o = ClusterStatusResponse(varClusterStatusResponse)

	return err
}

type NullableClusterStatusResponse struct {
	value *ClusterStatusResponse
	isSet bool
}

func (v NullableClusterStatusResponse) Get() *ClusterStatusResponse {
	return v.value
}

func (v *NullableClusterStatusResponse) Set(val *ClusterStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStatusResponse(val *ClusterStatusResponse) *NullableClusterStatusResponse {
	return &NullableClusterStatusResponse{value: val, isSet: true}
}

func (v NullableClusterStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


