/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Workload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Workload{}

// Workload struct for Workload
type Workload struct {
	WorkloadType WorkloadTypeEnum `json:"workload_type"`
	// A prompt describing the workload type you're running. Can be a LLM model name with precision, web hosting and more.
	WorkloadPrompt string `json:"workload_prompt"`
	// Weight factor balancing cost vs performance. -1 prioritizes cost, 1 prioritizes performance. For a balanced result, select 0.
	CostPerfWeight float64 `json:"cost_perf_weight"`
}

type _Workload Workload

// NewWorkload instantiates a new Workload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkload(workloadType WorkloadTypeEnum, workloadPrompt string, costPerfWeight float64) *Workload {
	this := Workload{}
	this.WorkloadType = workloadType
	this.WorkloadPrompt = workloadPrompt
	this.CostPerfWeight = costPerfWeight
	return &this
}

// NewWorkloadWithDefaults instantiates a new Workload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadWithDefaults() *Workload {
	this := Workload{}
	return &this
}

// GetWorkloadType returns the WorkloadType field value
func (o *Workload) GetWorkloadType() WorkloadTypeEnum {
	if o == nil {
		var ret WorkloadTypeEnum
		return ret
	}

	return o.WorkloadType
}

// GetWorkloadTypeOk returns a tuple with the WorkloadType field value
// and a boolean to check if the value has been set.
func (o *Workload) GetWorkloadTypeOk() (*WorkloadTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkloadType, true
}

// SetWorkloadType sets field value
func (o *Workload) SetWorkloadType(v WorkloadTypeEnum) {
	o.WorkloadType = v
}

// GetWorkloadPrompt returns the WorkloadPrompt field value
func (o *Workload) GetWorkloadPrompt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkloadPrompt
}

// GetWorkloadPromptOk returns a tuple with the WorkloadPrompt field value
// and a boolean to check if the value has been set.
func (o *Workload) GetWorkloadPromptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkloadPrompt, true
}

// SetWorkloadPrompt sets field value
func (o *Workload) SetWorkloadPrompt(v string) {
	o.WorkloadPrompt = v
}

// GetCostPerfWeight returns the CostPerfWeight field value
func (o *Workload) GetCostPerfWeight() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CostPerfWeight
}

// GetCostPerfWeightOk returns a tuple with the CostPerfWeight field value
// and a boolean to check if the value has been set.
func (o *Workload) GetCostPerfWeightOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CostPerfWeight, true
}

// SetCostPerfWeight sets field value
func (o *Workload) SetCostPerfWeight(v float64) {
	o.CostPerfWeight = v
}

func (o Workload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Workload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workload_type"] = o.WorkloadType
	toSerialize["workload_prompt"] = o.WorkloadPrompt
	toSerialize["cost_perf_weight"] = o.CostPerfWeight
	return toSerialize, nil
}

func (o *Workload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workload_type",
		"workload_prompt",
		"cost_perf_weight",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkload := _Workload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkload)

	if err != nil {
		return err
	}

	*o = Workload(varWorkload)

	return err
}

type NullableWorkload struct {
	value *Workload
	isSet bool
}

func (v NullableWorkload) Get() *Workload {
	return v.value
}

func (v *NullableWorkload) Set(val *Workload) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkload) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkload(val *Workload) *NullableWorkload {
	return &NullableWorkload{value: val, isSet: true}
}

func (v NullableWorkload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


