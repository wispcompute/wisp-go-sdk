/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
)

// ProjectsGetResponse Projects serializer.
type ProjectsGetResponse struct {
	Projects []Project `json:"projects"`
}

// NewProjectsGetResponse instantiates a new ProjectsGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsGetResponse(projects []Project) *ProjectsGetResponse {
	this := ProjectsGetResponse{}
	this.Projects = projects
	return &this
}

// NewProjectsGetResponseWithDefaults instantiates a new ProjectsGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsGetResponseWithDefaults() *ProjectsGetResponse {
	this := ProjectsGetResponse{}
	return &this
}

// GetProjects returns the Projects field value
func (o *ProjectsGetResponse) GetProjects() []Project {
	if o == nil {
		var ret []Project
		return ret
	}

	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value
// and a boolean to check if the value has been set.
func (o *ProjectsGetResponse) GetProjectsOk() (*[]Project, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Projects, true
}

// SetProjects sets field value
func (o *ProjectsGetResponse) SetProjects(v []Project) {
	o.Projects = v
}

func (o ProjectsGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["projects"] = o.Projects
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsGetResponse struct {
	value *ProjectsGetResponse
	isSet bool
}

func (v NullableProjectsGetResponse) Get() *ProjectsGetResponse {
	return v.value
}

func (v *NullableProjectsGetResponse) Set(val *ProjectsGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsGetResponse(val *ProjectsGetResponse) *NullableProjectsGetResponse {
	return &NullableProjectsGetResponse{value: val, isSet: true}
}

func (v NullableProjectsGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


