/*
Wisp API

Wisp API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package wisp

import (
	"encoding/json"
	"fmt"
)

// WorkloadTypeEnum * `batch` - batch * `serving` - serving
type WorkloadTypeEnum string

// List of WorkloadTypeEnum
const (
	BATCH WorkloadTypeEnum = "batch"
	SERVING WorkloadTypeEnum = "serving"
)

// All allowed values of WorkloadTypeEnum enum
var AllowedWorkloadTypeEnumEnumValues = []WorkloadTypeEnum{
	"batch",
	"serving",
}

func (v *WorkloadTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkloadTypeEnum(value)
	for _, existing := range AllowedWorkloadTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkloadTypeEnum", value)
}

// NewWorkloadTypeEnumFromValue returns a pointer to a valid WorkloadTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkloadTypeEnumFromValue(v string) (*WorkloadTypeEnum, error) {
	ev := WorkloadTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkloadTypeEnum: valid values are %v", v, AllowedWorkloadTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkloadTypeEnum) IsValid() bool {
	for _, existing := range AllowedWorkloadTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkloadTypeEnum value
func (v WorkloadTypeEnum) Ptr() *WorkloadTypeEnum {
	return &v
}

type NullableWorkloadTypeEnum struct {
	value *WorkloadTypeEnum
	isSet bool
}

func (v NullableWorkloadTypeEnum) Get() *WorkloadTypeEnum {
	return v.value
}

func (v *NullableWorkloadTypeEnum) Set(val *WorkloadTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadTypeEnum(val *WorkloadTypeEnum) *NullableWorkloadTypeEnum {
	return &NullableWorkloadTypeEnum{value: val, isSet: true}
}

func (v NullableWorkloadTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

